#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Node {
    float value;
    float x;
    float y;
    float size;
};

layout(set = 0, binding = 0, std430) buffer Nodes {
    Node nodes[];
};

layout(set = 0, binding = 1) uniform Params
{
    uint image_width;
    uint image_height;
    uint nodes_length;
    float width_factor;
};

layout(set = 0, binding = 2, std430) buffer Pixels {
    float pixels[];
};

layout(set = 0, binding = 3) buffer Range {
    ivec2 range;
};


void main(void) {
    uint pixel_index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * image_width;
    float x = float(gl_GlobalInvocationID.x) / float(image_width);
    float y = float(gl_GlobalInvocationID.y) / float(image_height);
    float value = 0;
    for (int i = 0; i < nodes_length; i++) {
        float sqrDistance = (x - nodes[i].x) * (x - nodes[i].x) + (y - nodes[i].y) * (y - nodes[i].y);
        value += nodes[i].value / (sqrDistance * width_factor + 1.0);
    }
    atomicMin(range.x, int(floor(value)));
    atomicMax(range.y, int(ceil(value)));
    pixels[pixel_index] = value;
}